Life cycle of the haptic data

the rx function is called when a new HID interrupt packet is received

hapticIntakeData is called with a parameter that is only the incoming
buffer offset with an address of +2. The data is a byte buffer 

void hapticIntakeData(&(rx_data[2])) essentially is called, so that 
the data can be treated as an array

an int we will call haptic_frames inside this function keeps
track of how many frames the data contains

A buffer is set up to store our decoded data
the buffer is size 6 and it's uint byte size

uint decoded_data[6]

our rx_data pointer is passed along here as encoded_dat

decoded_dat is a pointer to a uint buffer
haptic_frames = unpackHapticData(decoded_dat, encoded_dat)

First, the type of controller is determined, and the pointer 

Type 1 controller means there's no offeset of the data
Type 2 controller means the offset is incremented by 4 bytes (+32 bits)

Next this expression is called, and we have an equivalent which is easier to read

encoded_byte_4 = *(byte *)((int)encoded_dat + 3);
haptic_frames = encoded_byte_4 >> 6;

Here's a cleaner way to write it
uint8_t haptic_frames = encoded_dat[3] >> 6;


Next, we determine the pattern type
There is a possible range of 0 to 3 frames

uint8_t determine_pattern_type(uint8_t haptic_frames, const uint8_t *encoded_dat) {

    switch (haptic_frames) {
        case 0:
            if ((encoded_dat[0] | encoded_dat[1] | encoded_dat[2] | (encoded_dat[3] & 0x3F)) == 0) {
                return 0;
            }
            return 3;  // Type 3 pattern

        case 1:
            if ((encoded_dat[0] | encoded_dat[1] | (encoded_dat[2] & 0x0F)) == 0) {
                return 1;  // Type 1 pattern
            }
            if ((encoded_dat[0] & 0x80) == 0) {
                return 2;  // Type 2 pattern
            }
            if ((encoded_dat[0] & 0x80) != 0) {
                return 4;  // Type 4 pattern
            }
            return 0;

        case 2:
            if ((encoded_dat[0] | (encoded_dat[1] & 0x03)) == 0) {
                return 1;  // Type 1 pattern
            }
            return 3;  // Type 3 pattern

        case 3:
            return 1;  // Type 1 pattern

        default:
            return 0;  // Invalid input
    }
}

finally, we can convert the encoded data to our decoded uint16_t data

void decode_pattern(const uint8_t *encoded_dat, uint *decoded_dat, uint8_t pattern_type) {

    uint16_t unknownData = 0;

    switch(pattern_type) {
        case 1:
            // Type 1 pattern
            decoded_dat[0] = (encoded_dat[3] & 0x3F) << 1;
            decoded_dat[1] = ((encoded_dat[2] << 8 | encoded_dat[3]) & 0x7FF0) >> 3;
            decoded_dat[2] = ((encoded_dat[1] << 8 | encoded_dat[2]) & 0x7FF0) >> 3;
            decoded_dat[3] = (encoded_dat[1] & 0xF8) >> 3;
            decoded_dat[4] = ((encoded_dat[0] << 8 | encoded_dat[1]) & 0x7FF0) >> 3;
            unknownData = encoded_dat[0] & 0x1F;
            break;
        case 2:
            // Type 2 pattern
            decoded_dat[0] = ((encoded_dat[2] & 0x7F) << 8) | 0x8080 | ((encoded_dat[2] << 8 | encoded_dat[3]) & 0x7F00) >> 6;
            decoded_dat[1] = ((encoded_dat[1] & 0xFE) >> 1) | 0x8080 | ((encoded_dat[0] << 8 | encoded_dat[1]) & 0x7F00) >> 6;
            return;

        case 3:
            // Type 3 pattern
            // aaaaaaaa bbbbbbbb cccccccc dddddddd
            // 
            {
                uint16_t temp1 = ((encoded_dat[2] << 8 | encoded_dat[3]) & 0x7F00) >> 6 | ((encoded_dat[0] & 0xFE) << 7) | 0x8080;
                uint16_t temp2 = (encoded_dat[2] & 0xF8) >> 3;
                bool condition = (encoded_dat[0] & 0x80) == 0;
                decoded_dat[0] = condition ? temp1 : temp2;
                decoded_dat[1] = condition ? temp2 : temp1;
                decoded_dat[2] = ((encoded_dat[1] << 8 | encoded_dat[2]) & 0x7FF0) >> 3;
                decoded_dat[3] = encoded_dat[1] & 0x1F; // 5 bit value
                decoded_dat[4] = 0x18;
                unknownData = 0x18;
            }
            break;
        case 4:
            // Type 4 pattern
            {
                uint16_t temp = ((encoded_dat[2] << 8 | encoded_dat[3]) & 0x7F00) >> 6;
                if (encoded_dat[0] & 0x04) {
                    temp = (temp << 8) | 0x8000;
                } else {
                    temp |= 0x80;
                }
                bool condition = (encoded_dat[0] & 0x80) == 0;
                decoded_dat[0] = condition ? temp : 0x18;
                decoded_dat[1] = condition ? 0x18 : temp;
                decoded_dat[2] = (encoded_dat[2] & 0xF8) >> 3;
                decoded_dat[3] = ((encoded_dat[1] << 8 | encoded_dat[2]) & 0x7FF0) >> 3;
                decoded_dat[4] = encoded_dat[1] & 0x1F;
                unknownData = encoded_dat[0] >> 3;
            }
            break;
        default:
            return;
    }

    decoded_dat[5] = unknownData;
}

Next, there is a loop that iterates through all of the frames

for(uint i = 0; i < haptic_frames; i++)
{
    int available_space = GetAvailableSampleSpace();
    if(available_space > 19)
    {
        uint16_t *write_address = GetNextWriteAddress();
        // 1 frame -> idx 0, 
        // 2 frames -> idx 2, 
        // 3 frames -> idx 4
        ProcessSamples(write_address, &(decoded_data[i * 2]));
        IncrementWriteAddress();
    }
}

Inside the process samples function...


void generateNSamples(SynthState* state, int* output, int len, int targetAmplitude, int targetFrequency)
{
    int amplitudeIncrement = (targetAmplitude - state->currentAmplitude) / len;
    int frequencyIncrement = (targetFrequency - state->currentFrequency) / len;

    for (int i = 0; i < len; i++) {
        state->currentAmplitude += amplitudeIncrement;
        state->currentFrequency += frequencyIncrement;
        
        state->currentPhase += state->phaseIncrement * (state->currentFrequency >> 20);
        
        int sampleIndex = (unsigned)(state->currentPhase * 4096) >> 24;
        int sample = state->currentAmplitude * state->wavetable[sampleIndex];
        
        output[i] += sample;
    }

    if (targetAmplitude == 0) {
        state->currentAmplitude = 0;
        state->currentPhase = 0;
    }
}