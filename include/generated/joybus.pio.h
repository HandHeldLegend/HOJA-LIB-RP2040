// ---------------------------------------------------------------- //
// This file is autogenerated by pioasm version 2.2.0; do not edit! //
// ---------------------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// joybus //
// ------ //

#define joybus_wrap_target 0
#define joybus_wrap 26
#define joybus_pio_version 0

#define joybus_offset_joybusin 0u
#define joybus_offset_joybusout 11u

static const uint16_t joybus_program_instructions[] = {
            //     .wrap_target
    0xe080, //  0: set    pindirs, 0
    0xe001, //  1: set    pins, 1
    0xa0c3, //  2: mov    isr, null
    0xe027, //  3: set    x, 7
    0x20a0, //  4: wait   1 pin, 0
    0x2720, //  5: wait   0 pin, 0               [7]
    0xa042, //  6: nop
    0x4001, //  7: in     pins, 1
    0x0044, //  8: jmp    x--, 4
    0xc000, //  9: irq    nowait 0
    0x0003, // 10: jmp    3
    0xe080, // 11: set    pindirs, 0
    0xe000, // 12: set    pins, 0
    0x6021, // 13: out    x, 1
    0xe081, // 14: set    pindirs, 1
    0xa042, // 15: nop
    0x0034, // 16: jmp    !x, 20
    0xa042, // 17: nop
    0xe880, // 18: set    pindirs, 0             [8]
    0x0016, // 19: jmp    22
    0xa842, // 20: nop                           [8]
    0xe180, // 21: set    pindirs, 0             [1]
    0x00ed, // 22: jmp    !osre, 13
    0xa042, // 23: nop
    0xe781, // 24: set    pindirs, 1             [7]
    0xe780, // 25: set    pindirs, 0             [7]
    0x0000, // 26: jmp    0
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program joybus_program = {
    .instructions = joybus_program_instructions,
    .length = 27,
    .origin = -1,
    .pio_version = joybus_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config joybus_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + joybus_wrap_target, offset + joybus_wrap);
    return c;
}

#include "hardware/clocks.h"
static inline void joybus_jump_output(PIO pio, uint sm, uint offset)
{
    pio_sm_exec(pio, sm, pio_encode_jmp(offset + joybus_offset_joybusout));
}
static inline void joybus_program_reset(PIO pio, uint sm, uint offset)
{
    pio_sm_set_enabled(pio, sm, false);
    pio_sm_clear_fifos(pio, sm);
    pio_sm_exec(pio, sm, pio_encode_jmp(offset + joybus_offset_joybusin));
    pio_sm_set_enabled(pio, sm, true);
}
static inline void joybus_program_init(PIO pio, uint sm, uint offset, uint pin, pio_sm_config *c) {
    *c = joybus_program_get_default_config(offset);
    //gpio_init(pin);
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    //sm_config_set_jmp_pin(c, pin);
    // Must run 12800000hz
    float div = clock_get_hz(clk_sys) / (4000000);
    sm_config_set_clkdiv(c, div);
    // Set sideset pin
    //sm_config_set_sideset_pins(c, pin);
    // Configure IN pins (for in pins instruction)
    sm_config_set_in_pins(c, pin);
    // Configure SET pins
    sm_config_set_set_pins(c, pin, 1);
    // Configure OUT pins (optional but good practice)
    sm_config_set_out_pins(c, pin, 1);
    sm_config_set_in_shift(c, false, true, 8);
    sm_config_set_out_shift(c, false, true, 8);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

#endif

