#ifndef UTILITIES_PCM_H
#define UTILITIES_PCM_H

#include <stdint.h>
#include <stdbool.h>
#include "hoja_shared_types.h"
#include "devices_shared_types.h"

#define PCM_BUFFER_SIZE 255
#define PCM_SAMPLES_PER_PAIR 60
#define PCM_TOTAL_SIZE (PCM_BUFFER_SIZE * PCM_CHUNKS)
#define PCM_SAMPLE_RATE 12000
#define PCM_SINE_TABLE_SIZE 256
#define PCM_FIXED_POINT_SCALE_FREQ 256

/*
    printf("// Q15 format sine lookup table (-32768 to +32767)\n");
    printf("static const int16_t sine_table[256] = {\n    ");
    
    for(int i = 0; i < 256; i++) {
        // Calculate sine value for this index (0 to 2Ï€)
        double angle = (2.0 * PI * i) / 256.0;
        double sine = sin(angle);
        
        // Convert to Q15 format (-32768 to +32767)
        // Adding 0.5 for rounding before truncation
        int16_t fixed_sine = (int16_t)(sine * 32767.0 + (sine > 0 ? 0.5 : -0.5));
        
        // Print in hexadecimal
        printf("0x%04X", (uint16_t)fixed_sine);
        
        // Format output
        if (i < 255) printf(",");
        if ((i + 1) % 8 == 0) printf("\n    ");
        else printf(" ");
    }
    
    printf("\n};\n\n");
*/

// Q15 format sine lookup table (-32768 to +32767)
static const int16_t sine_table[256] = {
    0x0000, 0x0324, 0x0648, 0x096A, 0x0C8C, 0x0FAB, 0x12C8, 0x15E2,
    0x18F9, 0x1C0B, 0x1F1A, 0x2223, 0x2528, 0x2826, 0x2B1F, 0x2E11,
    0x30FB, 0x33DF, 0x36BA, 0x398C, 0x3C56, 0x3F17, 0x41CE, 0x447A,
    0x471C, 0x49B4, 0x4C3F, 0x4EBF, 0x5133, 0x539B, 0x55F5, 0x5842,
    0x5A82, 0x5CB3, 0x5ED7, 0x60EB, 0x62F1, 0x64E8, 0x66CF, 0x68A6,
    0x6A6D, 0x6C23, 0x6DC9, 0x6F5E, 0x70E2, 0x7254, 0x73B5, 0x7504,
    0x7641, 0x776B, 0x7884, 0x7989, 0x7A7C, 0x7B5C, 0x7C29, 0x7CE3,
    0x7D89, 0x7E1D, 0x7E9C, 0x7F09, 0x7F61, 0x7FA6, 0x7FD8, 0x7FF5,
    0x7FFF, 0x7FF5, 0x7FD8, 0x7FA6, 0x7F61, 0x7F09, 0x7E9C, 0x7E1D,
    0x7D89, 0x7CE3, 0x7C29, 0x7B5C, 0x7A7C, 0x7989, 0x7884, 0x776B,
    0x7641, 0x7504, 0x73B5, 0x7254, 0x70E2, 0x6F5E, 0x6DC9, 0x6C23,
    0x6A6D, 0x68A6, 0x66CF, 0x64E8, 0x62F1, 0x60EB, 0x5ED7, 0x5CB3,
    0x5A82, 0x5842, 0x55F5, 0x539B, 0x5133, 0x4EBF, 0x4C3F, 0x49B4,
    0x471C, 0x447A, 0x41CE, 0x3F17, 0x3C56, 0x398C, 0x36BA, 0x33DF,
    0x30FB, 0x2E11, 0x2B1F, 0x2826, 0x2528, 0x2223, 0x1F1A, 0x1C0B,
    0x18F9, 0x15E2, 0x12C8, 0x0FAB, 0x0C8C, 0x096A, 0x0648, 0x0324,
    0x0000, 0xFCDC, 0xF9B8, 0xF696, 0xF374, 0xF055, 0xED38, 0xEA1E,
    0xE707, 0xE3F5, 0xE0E6, 0xDDDD, 0xDAD8, 0xD7DA, 0xD4E1, 0xD1EF,
    0xCF05, 0xCC21, 0xC946, 0xC674, 0xC3AA, 0xC0E9, 0xBE32, 0xBB86,
    0xB8E4, 0xB64C, 0xB3C1, 0xB141, 0xAECD, 0xAC65, 0xAA0B, 0xA7BE,
    0xA57E, 0xA34D, 0xA129, 0x9F15, 0x9D0F, 0x9B18, 0x9931, 0x975A,
    0x9593, 0x93DD, 0x9237, 0x90A2, 0x8F1E, 0x8DAC, 0x8C4B, 0x8AFC,
    0x89BF, 0x8895, 0x877C, 0x8677, 0x8584, 0x84A4, 0x83D7, 0x831D,
    0x8277, 0x81E3, 0x8164, 0x80F7, 0x809F, 0x805A, 0x8028, 0x800B,
    0x8001, 0x800B, 0x8028, 0x805A, 0x809F, 0x80F7, 0x8164, 0x81E3,
    0x8277, 0x831D, 0x83D7, 0x84A4, 0x8584, 0x8677, 0x877C, 0x8895,
    0x89BF, 0x8AFC, 0x8C4B, 0x8DAC, 0x8F1E, 0x90A2, 0x9237, 0x93DD,
    0x9593, 0x975A, 0x9931, 0x9B18, 0x9D0F, 0x9F15, 0xA129, 0xA34D,
    0xA57E, 0xA7BE, 0xAA0B, 0xAC65, 0xAECD, 0xB141, 0xB3C1, 0xB64C,
    0xB8E4, 0xBB86, 0xBE32, 0xC0E9, 0xC3AA, 0xC674, 0xC946, 0xCC21,
    0xCF05, 0xD1EF, 0xD4E1, 0xD7DA, 0xDAD8, 0xDDDD, 0xE0E6, 0xE3F5,
    0xE707, 0xEA1E, 0xED38, 0xF055, 0xF374, 0xF696, 0xF9B8, 0xFCDC
};

bool pcm_amfm_push(haptic_processed_s *values);

#endif